{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Copy of PRAPTI_12E_NeuralNetwork_TitanicDataset.ipynb",
      "provenance": [],
      "collapsed_sections": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "metadata": {
        "id": "5JEvwerIkAwm"
      },
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "QPpCa1JgkgWI"
      },
      "source": [
        "# reading data\n",
        "\n",
        "train_data = pd.read_csv('train.csv')\n",
        "test_data = pd.read_csv('test.csv')"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 203
        },
        "id": "QNRPuY_ekj6w",
        "outputId": "248c8258-10e4-499b-e56d-31c552710390"
      },
      "source": [
        "train_data.head()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>PassengerId</th>\n",
              "      <th>Survived</th>\n",
              "      <th>Pclass</th>\n",
              "      <th>Name</th>\n",
              "      <th>Sex</th>\n",
              "      <th>Age</th>\n",
              "      <th>SibSp</th>\n",
              "      <th>Parch</th>\n",
              "      <th>Ticket</th>\n",
              "      <th>Fare</th>\n",
              "      <th>Cabin</th>\n",
              "      <th>Embarked</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>Braund, Mr. Owen Harris</td>\n",
              "      <td>male</td>\n",
              "      <td>22.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>A/5 21171</td>\n",
              "      <td>7.2500</td>\n",
              "      <td>NaN</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n",
              "      <td>female</td>\n",
              "      <td>38.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>PC 17599</td>\n",
              "      <td>71.2833</td>\n",
              "      <td>C85</td>\n",
              "      <td>C</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>Heikkinen, Miss. Laina</td>\n",
              "      <td>female</td>\n",
              "      <td>26.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>STON/O2. 3101282</td>\n",
              "      <td>7.9250</td>\n",
              "      <td>NaN</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n",
              "      <td>female</td>\n",
              "      <td>35.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>113803</td>\n",
              "      <td>53.1000</td>\n",
              "      <td>C123</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>Allen, Mr. William Henry</td>\n",
              "      <td>male</td>\n",
              "      <td>35.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>373450</td>\n",
              "      <td>8.0500</td>\n",
              "      <td>NaN</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   PassengerId  Survived  Pclass  ...     Fare Cabin  Embarked\n",
              "0            1         0       3  ...   7.2500   NaN         S\n",
              "1            2         1       1  ...  71.2833   C85         C\n",
              "2            3         1       3  ...   7.9250   NaN         S\n",
              "3            4         1       1  ...  53.1000  C123         S\n",
              "4            5         0       3  ...   8.0500   NaN         S\n",
              "\n",
              "[5 rows x 12 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 3
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "OjsvLMgpk-1J"
      },
      "source": [
        "# Processing Data"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "dxWdmbXWkmNd",
        "outputId": "10cd381c-8014-4852-a3e2-4eaf85c14e1c"
      },
      "source": [
        "# checking for nan values/ missing values\n",
        "train_data.isnull().sum()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "PassengerId      0\n",
              "Survived         0\n",
              "Pclass           0\n",
              "Name             0\n",
              "Sex              0\n",
              "Age            177\n",
              "SibSp            0\n",
              "Parch            0\n",
              "Ticket           0\n",
              "Fare             0\n",
              "Cabin          687\n",
              "Embarked         2\n",
              "dtype: int64"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 4
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "YIgmVQUOqh6u",
        "outputId": "47090207-7cbc-48dd-e73a-c14b998762c2"
      },
      "source": [
        "test_data.isnull().sum()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "PassengerId      0\n",
              "Pclass           0\n",
              "Name             0\n",
              "Sex              0\n",
              "Age             86\n",
              "SibSp            0\n",
              "Parch            0\n",
              "Ticket           0\n",
              "Fare             1\n",
              "Cabin          327\n",
              "Embarked         0\n",
              "dtype: int64"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 5
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Kvq-VbREmNFC"
      },
      "source": [
        "# filling nan values with mean values for 'AGE'\n",
        "\n",
        "train_data['Age'].fillna(int(train_data['Age'].mean()), inplace=True)\n",
        "test_data['Age'].fillna(int(test_data['Age'].mean()), inplace=True)\n",
        "\n",
        "# for column['Embarked'] --> filling wit hmost frequent values\n",
        "train_data['Embarked'].fillna(train_data['Embarked'].value_counts().index[0], inplace=True)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "TrwYp3Ynkntu"
      },
      "source": [
        "# clearing the data --> removing columns with NAN values and strings as values\n",
        "\n",
        "train_data.drop(['Name', 'Ticket', 'Fare', 'Cabin'], axis=1, inplace=True)\n",
        "test_data.drop(['Name', 'Ticket', 'Fare', 'Cabin'], axis=1, inplace=True)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ZvRXstE8rd1I"
      },
      "source": [
        "# rearranging columns of train_data\n",
        "\n",
        "cols = train_data.columns.tolist()\n",
        "cols = cols[:1] + cols[2:]+ cols[1:2]\n",
        "train_data = train_data[cols]"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "616W3cdQwFGp"
      },
      "source": [
        "#converting to numerical data\n",
        "\n",
        "from sklearn.preprocessing import LabelEncoder\n",
        "lb = LabelEncoder()\n",
        "\n",
        "test_data.iloc[:, 2] = lb.fit_transform(test_data.iloc[:,2])\n",
        "train_data.iloc[:, 2] = lb.fit_transform(train_data.iloc[:,2])\n",
        "\n",
        "train_data.iloc[:, -2] = lb.fit_transform(train_data.iloc[:,-2])\n",
        "test_data.iloc[:, -1] = lb.fit_transform(test_data.iloc[:,-1])"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 417
        },
        "id": "qHpLrx-P1Dlj",
        "outputId": "c6112435-f3b9-4e35-b88a-004ec058a85a"
      },
      "source": [
        "train_data"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>PassengerId</th>\n",
              "      <th>Pclass</th>\n",
              "      <th>Sex</th>\n",
              "      <th>Age</th>\n",
              "      <th>SibSp</th>\n",
              "      <th>Parch</th>\n",
              "      <th>Embarked</th>\n",
              "      <th>Survived</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>22.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>38.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>26.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>35.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>35.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>886</th>\n",
              "      <td>887</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>27.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>887</th>\n",
              "      <td>888</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>19.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>888</th>\n",
              "      <td>889</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>29.0</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>889</th>\n",
              "      <td>890</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>26.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>890</th>\n",
              "      <td>891</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>32.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>891 rows × 8 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "     PassengerId  Pclass  Sex   Age  SibSp  Parch  Embarked  Survived\n",
              "0              1       3    1  22.0      1      0         2         0\n",
              "1              2       1    0  38.0      1      0         0         1\n",
              "2              3       3    0  26.0      0      0         2         1\n",
              "3              4       1    0  35.0      1      0         2         1\n",
              "4              5       3    1  35.0      0      0         2         0\n",
              "..           ...     ...  ...   ...    ...    ...       ...       ...\n",
              "886          887       2    1  27.0      0      0         2         0\n",
              "887          888       1    0  19.0      0      0         2         1\n",
              "888          889       3    0  29.0      1      2         2         0\n",
              "889          890       1    1  26.0      0      0         0         1\n",
              "890          891       3    1  32.0      0      0         1         0\n",
              "\n",
              "[891 rows x 8 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 10
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 417
        },
        "id": "cuBEn2PU6WuY",
        "outputId": "f0b88491-53d6-498f-e9fc-8d2e12c4ff1f"
      },
      "source": [
        "test_data"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>PassengerId</th>\n",
              "      <th>Pclass</th>\n",
              "      <th>Sex</th>\n",
              "      <th>Age</th>\n",
              "      <th>SibSp</th>\n",
              "      <th>Parch</th>\n",
              "      <th>Embarked</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>892</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>34.5</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>893</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>47.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>894</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>62.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>895</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>27.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>896</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>22.0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>413</th>\n",
              "      <td>1305</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>30.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>414</th>\n",
              "      <td>1306</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>39.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>415</th>\n",
              "      <td>1307</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>38.5</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>416</th>\n",
              "      <td>1308</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>30.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>417</th>\n",
              "      <td>1309</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>30.0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>418 rows × 7 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "     PassengerId  Pclass  Sex   Age  SibSp  Parch  Embarked\n",
              "0            892       3    1  34.5      0      0         1\n",
              "1            893       3    0  47.0      1      0         2\n",
              "2            894       2    1  62.0      0      0         1\n",
              "3            895       3    1  27.0      0      0         2\n",
              "4            896       3    0  22.0      1      1         2\n",
              "..           ...     ...  ...   ...    ...    ...       ...\n",
              "413         1305       3    1  30.0      0      0         2\n",
              "414         1306       1    0  39.0      0      0         0\n",
              "415         1307       3    1  38.5      0      0         2\n",
              "416         1308       3    1  30.0      0      0         2\n",
              "417         1309       3    1  30.0      1      1         0\n",
              "\n",
              "[418 rows x 7 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 11
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "M7wOUkS47Jwl"
      },
      "source": [
        "# Neural Network - Training and Evaluation"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 320
        },
        "id": "kHipDDekl0QX",
        "outputId": "23becb40-eeec-4b8a-9df0-0c994521a9e2"
      },
      "source": [
        "# Analysing Data\n",
        "\n",
        "sns.heatmap(train_data.corr(), annot=True, cmap='Greens')\n",
        "plt.show()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 2 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "iHfznzANl_ly"
      },
      "source": [
        "# splitting data\n",
        "\n",
        "X_train = train_data.iloc[:, :7]  # input features\n",
        "Y_train = train_data.iloc[:, 7]  #output"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "D8nZFnFd7fii"
      },
      "source": [
        "# normalising data\n",
        "\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "\n",
        "sdc = StandardScaler()\n",
        "X_train = sdc.fit_transform(X_train)\n",
        "X_test = sdc.fit_transform(test_data)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "69woL-QC8DaT"
      },
      "source": [
        "#setting architecture\n",
        "\n",
        "import keras\n",
        "from keras.models import Sequential\n",
        "from keras.layers import Dense\n",
        "from keras.layers import Dropout\n",
        "from keras import regularizers\n",
        "\n",
        "#setting layers\n",
        "\n",
        "# dropout selected via trial and error between values [0.2-0.5] to maximise accuracy on kaggle dataset  \n",
        "# regularizers used to avoid overfitting\n",
        "model = Sequential([\n",
        "    Dense(1000, activation='relu', kernel_regularizer=regularizers.l2(0.01)),\n",
        "    Dropout(0.3),\n",
        "    Dense(1000, activation='relu', kernel_regularizer=regularizers.l2(0.01)),\n",
        "    Dropout(0.3),\n",
        "    Dense(1000, activation='relu', kernel_regularizer=regularizers.l2(0.01)),\n",
        "    Dropout(0.3),\n",
        "    Dense(1000, activation='relu', kernel_regularizer=regularizers.l2(0.01)),\n",
        "    Dropout(0.3),\n",
        "    Dense(1, activation='sigmoid', kernel_regularizer=regularizers.l2(0.01)),\n",
        "])\n",
        "\n",
        "# setting metrics\n",
        "model.compile(optimizer='adam',\n",
        "              loss='binary_crossentropy',\n",
        "              metrics=['accuracy'])"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Wct2fZf-9FcK",
        "outputId": "810336fc-3f61-4a04-c746-0251b14bf069"
      },
      "source": [
        "# providing training data to model            \n",
        "model.fit(X_train, Y_train, batch_size=30, epochs=100)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Epoch 1/100\n",
            "30/30 [==============================] - 25s 44ms/step - loss: 21.8062 - accuracy: 0.6839\n",
            "Epoch 2/100\n",
            "30/30 [==============================] - 1s 44ms/step - loss: 3.2514 - accuracy: 0.8098\n",
            "Epoch 3/100\n",
            "30/30 [==============================] - 1s 42ms/step - loss: 0.7762 - accuracy: 0.8232\n",
            "Epoch 4/100\n",
            "30/30 [==============================] - 1s 44ms/step - loss: 0.5899 - accuracy: 0.8366\n",
            "Epoch 5/100\n",
            "30/30 [==============================] - 1s 44ms/step - loss: 0.5585 - accuracy: 0.8341\n",
            "Epoch 6/100\n",
            "30/30 [==============================] - 1s 44ms/step - loss: 0.5517 - accuracy: 0.8410\n",
            "Epoch 7/100\n",
            "30/30 [==============================] - 1s 43ms/step - loss: 0.5554 - accuracy: 0.8042\n",
            "Epoch 8/100\n",
            "30/30 [==============================] - 1s 44ms/step - loss: 0.5614 - accuracy: 0.8094\n",
            "Epoch 9/100\n",
            "30/30 [==============================] - 1s 44ms/step - loss: 0.5503 - accuracy: 0.8308\n",
            "Epoch 10/100\n",
            "30/30 [==============================] - 1s 44ms/step - loss: 0.5330 - accuracy: 0.8369\n",
            "Epoch 11/100\n",
            "30/30 [==============================] - 1s 43ms/step - loss: 0.5151 - accuracy: 0.8420\n",
            "Epoch 12/100\n",
            "30/30 [==============================] - 1s 43ms/step - loss: 0.5335 - accuracy: 0.8370\n",
            "Epoch 13/100\n",
            "30/30 [==============================] - 1s 44ms/step - loss: 0.5427 - accuracy: 0.8203\n",
            "Epoch 14/100\n",
            "30/30 [==============================] - 1s 45ms/step - loss: 0.5285 - accuracy: 0.8293\n",
            "Epoch 15/100\n",
            "30/30 [==============================] - 1s 44ms/step - loss: 0.5177 - accuracy: 0.8423\n",
            "Epoch 16/100\n",
            "30/30 [==============================] - 1s 46ms/step - loss: 0.5324 - accuracy: 0.8295\n",
            "Epoch 17/100\n",
            "30/30 [==============================] - 1s 45ms/step - loss: 0.5318 - accuracy: 0.8271\n",
            "Epoch 18/100\n",
            "30/30 [==============================] - 1s 44ms/step - loss: 0.5564 - accuracy: 0.8040\n",
            "Epoch 19/100\n",
            "30/30 [==============================] - 1s 43ms/step - loss: 0.5540 - accuracy: 0.7989\n",
            "Epoch 20/100\n",
            "30/30 [==============================] - 1s 43ms/step - loss: 0.4937 - accuracy: 0.8477\n",
            "Epoch 21/100\n",
            "30/30 [==============================] - 1s 43ms/step - loss: 0.5802 - accuracy: 0.8063\n",
            "Epoch 22/100\n",
            "30/30 [==============================] - 1s 43ms/step - loss: 0.5339 - accuracy: 0.8296\n",
            "Epoch 23/100\n",
            "30/30 [==============================] - 1s 44ms/step - loss: 0.5247 - accuracy: 0.8279\n",
            "Epoch 24/100\n",
            "30/30 [==============================] - 1s 45ms/step - loss: 0.5283 - accuracy: 0.8295\n",
            "Epoch 25/100\n",
            "30/30 [==============================] - 1s 45ms/step - loss: 0.5243 - accuracy: 0.8079\n",
            "Epoch 26/100\n",
            "30/30 [==============================] - 1s 44ms/step - loss: 0.5258 - accuracy: 0.8236\n",
            "Epoch 27/100\n",
            "30/30 [==============================] - 1s 44ms/step - loss: 0.5242 - accuracy: 0.8263\n",
            "Epoch 28/100\n",
            "30/30 [==============================] - 1s 44ms/step - loss: 0.5022 - accuracy: 0.8420\n",
            "Epoch 29/100\n",
            "30/30 [==============================] - 1s 43ms/step - loss: 0.5337 - accuracy: 0.8134\n",
            "Epoch 30/100\n",
            "30/30 [==============================] - 1s 43ms/step - loss: 0.5207 - accuracy: 0.8227\n",
            "Epoch 31/100\n",
            "30/30 [==============================] - 1s 44ms/step - loss: 0.5412 - accuracy: 0.8026\n",
            "Epoch 32/100\n",
            "30/30 [==============================] - 1s 43ms/step - loss: 0.5084 - accuracy: 0.8348\n",
            "Epoch 33/100\n",
            "30/30 [==============================] - 1s 44ms/step - loss: 0.5070 - accuracy: 0.8262\n",
            "Epoch 34/100\n",
            "30/30 [==============================] - 1s 44ms/step - loss: 0.5214 - accuracy: 0.8267\n",
            "Epoch 35/100\n",
            "30/30 [==============================] - 1s 43ms/step - loss: 0.5011 - accuracy: 0.8347\n",
            "Epoch 36/100\n",
            "30/30 [==============================] - 1s 44ms/step - loss: 0.5352 - accuracy: 0.8097\n",
            "Epoch 37/100\n",
            "30/30 [==============================] - 1s 42ms/step - loss: 0.5695 - accuracy: 0.8031\n",
            "Epoch 38/100\n",
            "30/30 [==============================] - 1s 43ms/step - loss: 0.5126 - accuracy: 0.8125\n",
            "Epoch 39/100\n",
            "30/30 [==============================] - 1s 43ms/step - loss: 0.4973 - accuracy: 0.8369\n",
            "Epoch 40/100\n",
            "30/30 [==============================] - 1s 43ms/step - loss: 0.5355 - accuracy: 0.8095\n",
            "Epoch 41/100\n",
            "30/30 [==============================] - 1s 44ms/step - loss: 0.5130 - accuracy: 0.8267\n",
            "Epoch 42/100\n",
            "30/30 [==============================] - 1s 45ms/step - loss: 0.5348 - accuracy: 0.8134\n",
            "Epoch 43/100\n",
            "30/30 [==============================] - 1s 43ms/step - loss: 0.5125 - accuracy: 0.8218\n",
            "Epoch 44/100\n",
            "30/30 [==============================] - 1s 44ms/step - loss: 0.5171 - accuracy: 0.8340\n",
            "Epoch 45/100\n",
            "30/30 [==============================] - 1s 44ms/step - loss: 0.5136 - accuracy: 0.8354\n",
            "Epoch 46/100\n",
            "30/30 [==============================] - 1s 44ms/step - loss: 0.5129 - accuracy: 0.8355\n",
            "Epoch 47/100\n",
            "30/30 [==============================] - 1s 45ms/step - loss: 0.5195 - accuracy: 0.8158\n",
            "Epoch 48/100\n",
            "30/30 [==============================] - 1s 46ms/step - loss: 0.5166 - accuracy: 0.8237\n",
            "Epoch 49/100\n",
            "30/30 [==============================] - 1s 43ms/step - loss: 0.5249 - accuracy: 0.8128\n",
            "Epoch 50/100\n",
            "30/30 [==============================] - 1s 44ms/step - loss: 0.5445 - accuracy: 0.7921\n",
            "Epoch 51/100\n",
            "30/30 [==============================] - 1s 46ms/step - loss: 0.5366 - accuracy: 0.8206\n",
            "Epoch 52/100\n",
            "30/30 [==============================] - 1s 43ms/step - loss: 0.5137 - accuracy: 0.8196\n",
            "Epoch 53/100\n",
            "30/30 [==============================] - 1s 44ms/step - loss: 0.5369 - accuracy: 0.7951\n",
            "Epoch 54/100\n",
            "30/30 [==============================] - 1s 44ms/step - loss: 0.4850 - accuracy: 0.8431\n",
            "Epoch 55/100\n",
            "30/30 [==============================] - 1s 44ms/step - loss: 0.5242 - accuracy: 0.7991\n",
            "Epoch 56/100\n",
            "30/30 [==============================] - 1s 43ms/step - loss: 0.5079 - accuracy: 0.8329\n",
            "Epoch 57/100\n",
            "30/30 [==============================] - 1s 44ms/step - loss: 0.5111 - accuracy: 0.8324\n",
            "Epoch 58/100\n",
            "30/30 [==============================] - 1s 46ms/step - loss: 0.5420 - accuracy: 0.8142\n",
            "Epoch 59/100\n",
            "30/30 [==============================] - 1s 44ms/step - loss: 0.5293 - accuracy: 0.8166\n",
            "Epoch 60/100\n",
            "30/30 [==============================] - 1s 44ms/step - loss: 0.5506 - accuracy: 0.8009\n",
            "Epoch 61/100\n",
            "30/30 [==============================] - 1s 44ms/step - loss: 0.5198 - accuracy: 0.8090\n",
            "Epoch 62/100\n",
            "30/30 [==============================] - 1s 44ms/step - loss: 0.5042 - accuracy: 0.8298\n",
            "Epoch 63/100\n",
            "30/30 [==============================] - 1s 44ms/step - loss: 0.5387 - accuracy: 0.8126\n",
            "Epoch 64/100\n",
            "30/30 [==============================] - 1s 44ms/step - loss: 0.5258 - accuracy: 0.8061\n",
            "Epoch 65/100\n",
            "30/30 [==============================] - 1s 45ms/step - loss: 0.4978 - accuracy: 0.8288\n",
            "Epoch 66/100\n",
            "30/30 [==============================] - 1s 47ms/step - loss: 0.4992 - accuracy: 0.8347\n",
            "Epoch 67/100\n",
            "30/30 [==============================] - 1s 45ms/step - loss: 0.5191 - accuracy: 0.8166\n",
            "Epoch 68/100\n",
            "30/30 [==============================] - 1s 44ms/step - loss: 0.5053 - accuracy: 0.8255\n",
            "Epoch 69/100\n",
            "30/30 [==============================] - 1s 46ms/step - loss: 0.5343 - accuracy: 0.8061\n",
            "Epoch 70/100\n",
            "30/30 [==============================] - 1s 45ms/step - loss: 0.5721 - accuracy: 0.7959\n",
            "Epoch 71/100\n",
            "30/30 [==============================] - 1s 43ms/step - loss: 0.5301 - accuracy: 0.8130\n",
            "Epoch 72/100\n",
            "30/30 [==============================] - 1s 44ms/step - loss: 0.5214 - accuracy: 0.8246\n",
            "Epoch 73/100\n",
            "30/30 [==============================] - 1s 45ms/step - loss: 0.4923 - accuracy: 0.8291\n",
            "Epoch 74/100\n",
            "30/30 [==============================] - 1s 44ms/step - loss: 0.5258 - accuracy: 0.8063\n",
            "Epoch 75/100\n",
            "30/30 [==============================] - 1s 43ms/step - loss: 0.5206 - accuracy: 0.8104\n",
            "Epoch 76/100\n",
            "30/30 [==============================] - 1s 44ms/step - loss: 0.5148 - accuracy: 0.8120\n",
            "Epoch 77/100\n",
            "30/30 [==============================] - 1s 45ms/step - loss: 0.5318 - accuracy: 0.8267\n",
            "Epoch 78/100\n",
            "30/30 [==============================] - 1s 45ms/step - loss: 0.5415 - accuracy: 0.8354\n",
            "Epoch 79/100\n",
            "30/30 [==============================] - 1s 44ms/step - loss: 0.5068 - accuracy: 0.8295\n",
            "Epoch 80/100\n",
            "30/30 [==============================] - 1s 44ms/step - loss: 0.5053 - accuracy: 0.8426\n",
            "Epoch 81/100\n",
            "30/30 [==============================] - 1s 44ms/step - loss: 0.4923 - accuracy: 0.8277\n",
            "Epoch 82/100\n",
            "30/30 [==============================] - 1s 43ms/step - loss: 0.5082 - accuracy: 0.8216\n",
            "Epoch 83/100\n",
            "30/30 [==============================] - 1s 43ms/step - loss: 0.4944 - accuracy: 0.8358\n",
            "Epoch 84/100\n",
            "30/30 [==============================] - 1s 43ms/step - loss: 0.5222 - accuracy: 0.8184\n",
            "Epoch 85/100\n",
            "30/30 [==============================] - 1s 44ms/step - loss: 0.5263 - accuracy: 0.8147\n",
            "Epoch 86/100\n",
            "30/30 [==============================] - 1s 43ms/step - loss: 0.5198 - accuracy: 0.8039\n",
            "Epoch 87/100\n",
            "30/30 [==============================] - 1s 44ms/step - loss: 0.5200 - accuracy: 0.8084\n",
            "Epoch 88/100\n",
            "30/30 [==============================] - 1s 43ms/step - loss: 0.5216 - accuracy: 0.8259\n",
            "Epoch 89/100\n",
            "30/30 [==============================] - 1s 44ms/step - loss: 0.4987 - accuracy: 0.8275\n",
            "Epoch 90/100\n",
            "30/30 [==============================] - 1s 44ms/step - loss: 0.5539 - accuracy: 0.8077\n",
            "Epoch 91/100\n",
            "30/30 [==============================] - 1s 44ms/step - loss: 0.5056 - accuracy: 0.8247\n",
            "Epoch 92/100\n",
            "30/30 [==============================] - 1s 46ms/step - loss: 0.5004 - accuracy: 0.8271\n",
            "Epoch 93/100\n",
            "30/30 [==============================] - 1s 45ms/step - loss: 0.5064 - accuracy: 0.8333\n",
            "Epoch 94/100\n",
            "30/30 [==============================] - 1s 42ms/step - loss: 0.4829 - accuracy: 0.8447\n",
            "Epoch 95/100\n",
            "30/30 [==============================] - 1s 43ms/step - loss: 0.5105 - accuracy: 0.8347\n",
            "Epoch 96/100\n",
            "30/30 [==============================] - 1s 45ms/step - loss: 0.5067 - accuracy: 0.8247\n",
            "Epoch 97/100\n",
            "30/30 [==============================] - 1s 45ms/step - loss: 0.5116 - accuracy: 0.8320\n",
            "Epoch 98/100\n",
            "30/30 [==============================] - 1s 44ms/step - loss: 0.5262 - accuracy: 0.8150\n",
            "Epoch 99/100\n",
            "30/30 [==============================] - 1s 43ms/step - loss: 0.5408 - accuracy: 0.8284\n",
            "Epoch 100/100\n",
            "30/30 [==============================] - 1s 43ms/step - loss: 0.5221 - accuracy: 0.8123\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<keras.callbacks.History at 0x7f60fe32f310>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 16
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "va7SCvnP_P5T",
        "outputId": "11acefb4-e00a-4924-ef91-abc7763d04cf"
      },
      "source": [
        "model.evaluate(X_train, Y_train)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "28/28 [==============================] - 1s 12ms/step - loss: 0.4985 - accuracy: 0.8328\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[0.4985477924346924, 0.8327721953392029]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 17
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "4fOENOQL_T9c"
      },
      "source": [
        "# Prediction for Dataset"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "5APT755K_cie"
      },
      "source": [
        "prediction = model.predict(X_test).tolist()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "m1L0WbBiBvPO"
      },
      "source": [
        "arr = []\n",
        "for val in prediction:\n",
        "    if val[0] >= 0.45:\n",
        "        arr.append(1)\n",
        "    else:\n",
        "        arr.append(0)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "BnsPE_AxGXZ4",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "f9a1be5e-bbf1-41d6-e9e0-28659151adab"
      },
      "source": [
        "# final result\n",
        "print(arr)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "z6NVS3v8GOHa",
        "outputId": "bec64d80-f242-4532-d262-e29a1c6632d6"
      },
      "source": [
        "# submitting on kaggle --> EXTRAS\n",
        "\n",
        "submission = pd.DataFrame({'PassengerId':test_data['PassengerId'],'Survived':arr})\n",
        "submission\n",
        "\n",
        "# saving file\n",
        "filename = 'predictTitanic.csv'\n",
        "submission.to_csv(filename,index=False)\n",
        "print('Saved file: ' + filename)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Saved file: predictTitanic.csv\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "0ngZhSR9UaQG"
      },
      "source": [
        "# Visualisation"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "bqheL3BPUi7X",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "84542754-dd64-4dfd-d541-eb12a6245a17"
      },
      "source": [
        "!pip3 install ann_visualizer\n",
        "!pip install graphviz\n",
        "\n",
        "from ann_visualizer.visualize import ann_viz  \n",
        "ann_viz(model, title=\"neural network\")\n",
        "\n",
        "# the file for my implemented neural network\n",
        "# is now available as--> network.gv.pdf"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Collecting ann_visualizer\n",
            "  Downloading https://files.pythonhosted.org/packages/db/51/157be500337fba347e32711aaf9f11c1ba9e1162f486a1d708b4ae594ea4/ann_visualizer-2.5.tar.gz\n",
            "Building wheels for collected packages: ann-visualizer\n",
            "  Building wheel for ann-visualizer (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "  Created wheel for ann-visualizer: filename=ann_visualizer-2.5-cp37-none-any.whl size=4168 sha256=a452a1263d0b1a3b6ab729b1cfc650b4f466a91354deb814b4df7cb0a8dc5825\n",
            "  Stored in directory: /root/.cache/pip/wheels/b6/b4/4e/d92f50c9c4f004cf315a0e0fcd455486bd799c50fe80cf1f5d\n",
            "Successfully built ann-visualizer\n",
            "Installing collected packages: ann-visualizer\n",
            "Successfully installed ann-visualizer-2.5\n",
            "Requirement already satisfied: graphviz in /usr/local/lib/python3.7/dist-packages (0.10.1)\n"
          ],
          "name": "stdout"
        }
      ]
    }
  ]
}
